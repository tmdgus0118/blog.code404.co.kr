<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[qoohk]]></title><description><![CDATA[qoohk developer blog]]></description><link>http://blog.code404.co.kr</link><generator>RSS for Node</generator><lastBuildDate>Fri, 21 Oct 2016 08:13:50 GMT</lastBuildDate><atom:link href="http://blog.code404.co.kr/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[연료채우기 문제]]></title><description><![CDATA[<div class="paragraph">
<p><a href="https://www.acmicpc.net/problem/1826">문제바로가기</a></p>
</div>
<div class="paragraph">
<p>처음에 문제 보고 생각이 잘 안났는데 그렇게 어려운 문제는 아닌듯 하다.</p>
</div>
<div class="paragraph">
<p>우선순위큐와 정렬을 잘이용하면 풀 수 있다.</p>
</div>
<div class="paragraph">
<p>마침 연료제한이 없어서 더 쉬운 문제.</p>
</div>
<div class="paragraph">
<p><strong>풀이</strong></p>
</div>
<div class="paragraph">
<p>우선 주유소의 거리를 기준으로 정렬을 한다. (이때 도착지점도 같이 넣어서 정렬해줘야함.)</p>
</div>
<div class="paragraph">
<p>for문으로 도착지점 전까지의 모든 주유소를 탐색하면서 주유소를 갈만한 연료가 없으면 충분해질때까지 우선순위 큐에서</p>
</div>
<div class="paragraph">
<p>가져와서 충전하고, 현재 주유소의 연료를 우선순위큐에 넣는다.</p>
</div>
<div class="paragraph">
<p>(만약 여기서 우선순위 큐가 비었거나 하면 -1)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">#include &lt;iostream&gt;
#include&lt;queue&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
using namespace std;

typedef struct GAS_STAT {
	int dist,fuel;
	GAS_STAT(int _d,int _f) : dist(_d) , fuel(_f) {}
	GAS_STAT() { dist = 0; fuel = 0;}
	bool operator&lt;(struct GAS_STAT&amp; c) const  {
		return dist &lt; c.dist;
	}
}station;
int N;
station s[10001];
int main() {
	// your code goes here
	priority_queue&lt;int&gt; q;
	int L, P , cnt = 0 , i;
	cin &gt;&gt; N;
	for(int i=0;i&lt;N;i++){
		cin &gt;&gt; s[i].dist &gt;&gt; s[i].fuel;
	}
	cin &gt;&gt; L &gt;&gt; P;
	i = 0;
	s[N].dist = L;
	s[N].fuel = 0;
	sort(s, s+N);
	while(P &lt; L &amp;&amp; i &lt;= N){

		station&amp; cur = s[i];
		while(cur.dist &gt; P &amp;&amp; !q.empty()){
			int stop = q.top();
			q.pop();
			P += stop;
			cnt++;
		}
		if(cur.dist &gt; P){
			break;
		}
		q.push(cur.fuel);
		i++;
	}
	cout &lt;&lt; (P &lt; L ? -1 : cnt);
	return 0;
}</code></pre>
</div>
</div>]]></description><link>http://blog.code404.co.kr/2016/10/21/algo-1826.html</link><guid isPermaLink="true">http://blog.code404.co.kr/2016/10/21/algo-1826.html</guid><dc:creator><![CDATA[Seung Hyun, Kim]]></dc:creator><pubDate>Fri, 21 Oct 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[버블소트 문제]]></title><description><![CDATA[<div class="paragraph">
<p><a href="https://www.acmicpc.net/problem/1517">문제바로가기</a></p>
</div>
<div class="paragraph">
<p><strong>풀이</strong></p>
</div>
<div class="paragraph">
<p>버블소트가 문제이름인데</p>
</div>
<div class="paragraph">
<p>이게 버블소트로 풀리면 너무 친절함!</p>
</div>
<div class="paragraph">
<p>진짜로 버블소트가 아니라 전혀 다른문제이다.</p>
</div>
<div class="paragraph">
<p>버블소트가 swap하는 경우는 A[i], A[j]  가있을때 A[i] &gt; A[j]이고 i &lt; j인경우.</p>
</div>
<div class="paragraph">
<p>즉 먼저 나온 원소가 나중에 나온 원소보다 값이 더 큰경우이다. ( 오름차순 기준 )</p>
</div>
<div class="paragraph">
<p>이 문제의 풀이법은 O(NlogN)으로 머지소트를 활용하는 방법, bit를 활용하는 방법이 있는데</p>
</div>
<div class="paragraph">
<p>머지소트가 좀 더 이해하기 쉽다.</p>
</div>
<div class="paragraph">
<p>머지소트에서 A버켓과 B버켓을 merge하는 과정에서,</p>
</div>
<div class="paragraph">
<p>B버켓이 선택되면 A버켓의 남은 갯수만큼 카운트를 올려주면된다.</p>
</div>
<div class="paragraph">
<p>풀이할때 명심해야 할점은 <strong>int로 풀면안된다.</strong></p>
</div>
<div class="paragraph">
<p>long long int써야됨.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">#include &lt;iostream&gt;
using namespace std;

typedef long long int lld;

int A[500000];
int S[500000];
lld merge(int s,int mid ,int e){
	lld cnt = 0;
	int t = mid+1;
	int p = s;
	int r = s;
	while(p &lt;= mid &amp;&amp; t &lt;= e){
		if(A[t] &lt; A[p]){
			S[r++] = A[t++];
			cnt += (lld)(mid - p + 1);
		} else {
			S[r++] = A[p++];
		}
	}
	while(p &lt;= mid) S[r++] = A[p++];
	while(t &lt;= e) S[r++] = A[t++];
	for(r = s;r&lt;= e;r++){
		A[r] = S[r];
	}
	return cnt;
}
lld sort(int s,int e){
	int mid = (s+e)/2;
	lld cnt = 0;
	if(s == e){
		return 0;
	}
	cnt += sort(s, mid);
	cnt += sort(mid+1,e);
	return cnt + merge(s, mid, e);
}


int main() {
	// your code goes here
	int N;
	cin &gt;&gt; N;
	for(int i=0;i&lt;N;i++){
		cin &gt;&gt; A[i];
	}
	cout &lt;&lt; sort(0,N-1);
	return 0;
}</code></pre>
</div>
</div>]]></description><link>http://blog.code404.co.kr/2016/10/19/algo-1517.html</link><guid isPermaLink="true">http://blog.code404.co.kr/2016/10/19/algo-1517.html</guid><dc:creator><![CDATA[Seung Hyun, Kim]]></dc:creator><pubDate>Wed, 19 Oct 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Z 문제]]></title><description><![CDATA[<div class="paragraph">
<p><a href="https://www.acmicpc.net/problem/1074">문제바로가기</a></p>
</div>
<div class="paragraph">
<p><strong>풀이</strong></p>
</div>
<div class="paragraph">
<p>분할정복의 대표적인 예이다.</p>
</div>
<div class="paragraph">
<p>우선 2^N * 2^N 사각형을 4등분 하여
각각
1 2
3 4
분면이라고 했을때
(r,c)가 1,2,3,4분면중 어디에 속하는지 찾는다</p>
</div>
<div class="paragraph">
<p>그리고 그 분면에서 다시 재귀를 돌려서 (r,c)가 그 분면에서 몇번째인지 찾는다.</p>
</div>
<div class="paragraph">
<p>식으로 표현해보면,</p>
</div>
<div class="paragraph">
<p>f(N,r,c) 가 2^N * 2^N사각형에서 (r,c)가 몇번째인지를 찾는 것이라고 할때,</p>
</div>
<div class="paragraph">
<p>f(N,r,c) = (r,c)의 분면 * 2^(N-1) + f(N-1, r - 2^(N-1), c - 2^(N-1)) 이 된다.</p>
</div>
<div class="paragraph">
<p>문제에서 주의점.</p>
</div>
<div class="paragraph">
<p>보다싶이 테스트케이스 갯수가 안주어져서, N,r,c를 받을때 cin.eof 를 이용해야 하는데</p>
</div>
<div class="paragraph">
<p>이거 하면 틀리다고 나옴..</p>
</div>
<div class="paragraph">
<p>따라서 while(cin &gt;&gt; N &gt;&gt; r &gt;&gt; c) 로 했음.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">#include &lt;iostream&gt;
#include &lt;algorithm&gt;
using namespace std;

int find(int W,int r, int c){
	int idx = 0;
	if(W &lt;= 2){
		return r*2 + c;
	}
	int W2 = W/2;
	if(r &gt;= W2) {
		idx+=2;
	}
	if(c &gt;= W2) {
		idx++;
	}

	return idx*W2*W2 + find(W2, r%W2, c%W2);
}
int main() {
	// your code goes here
	int N,r,c;
	while(cin &gt;&gt; N &gt;&gt; r &gt;&gt; c){
		cout &lt;&lt; find(pow(2,N), r,c) &lt;&lt; endl;
	}
	return 0;
}</code></pre>
</div>
</div>]]></description><link>http://blog.code404.co.kr/2016/10/19/algo-1074.html</link><guid isPermaLink="true">http://blog.code404.co.kr/2016/10/19/algo-1074.html</guid><dc:creator><![CDATA[Seung Hyun, Kim]]></dc:creator><pubDate>Wed, 19 Oct 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[격자상의 경로]]></title><description><![CDATA[<div class="paragraph">
<p><a href="https://www.acmicpc.net/problem/10164">문제바로가기</a></p>
</div>
<div class="paragraph">
<p><strong>풀이</strong></p>
</div>
<div class="paragraph">
<p>문제 참 쉽다.</p>
</div>
<div class="paragraph">
<p>근데 문제를 잘 읽어야 된다.. K가 0이 될수 있다는걸 모르고 풀었다가 틀림 ㅠ..</p>
</div>
<div class="paragraph">
<p>우선</p>
</div>
<div class="paragraph">
<p>1부터 K점까지의 갈수 있는 모든 경로* K점부터 끝점까지 갈수 있는 모든 경로</p>
</div>
<div class="paragraph">
<p>가 1부터 끝점까지 가는데 K를 거쳐야 되는 모든 경로</p>
</div>
<div class="paragraph">
<p>이고,</p>
</div>
<div class="paragraph">
<p>d[i][j] 가 (i,j)까지 갈수 있는 모든 경로의 수라고 가정했을때</p>
</div>
<div class="paragraph">
<p>d[i][j] = d[i-1][j] + d[i][j-1]; 이다.</p>
</div>
<div class="paragraph">
<p>그냥 .. N * M 반복문 돌아서 채우면 된다.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">#include &lt;iostream&gt;
using namespace std;
int m[2][16][16];
bool v[2][16][16];
int N,M,K;
int f(int c, int x, int y , int dx,int dy){
	for(int i = y;i &lt;= dy; i++){
		for(int j= x;j &lt;= dx;j++){
			int s = m[c][i-1][j] + m[c][i][j-1];
			m[c][i][j] = max(s, m[c][i][j]);
		}
	}
}
int main() {
	// your code goes here
	cin &gt;&gt; N &gt;&gt; M &gt;&gt; K;
	int dy,dx;
	m[0][1][1] = 1;
	if(K &gt; 0){
		dy = ((K-1) / M)+1;
		dx = ((K-1) % M)+1;
		m[1][dy][dx] = 1;
		f(0, 1,1,dx,dy);

		f(1, dx,dy, M, N);

		cout &lt;&lt; m[0][dy][dx] * m[1][N][M] &lt;&lt; endl;
	} else {
		f(0,1,1,M,N);
		cout &lt;&lt; m[0][N][M] &lt;&lt; endl;
	}
	return 0;
}</code></pre>
</div>
</div>]]></description><link>http://blog.code404.co.kr/2016/10/19/algo-10164.html</link><guid isPermaLink="true">http://blog.code404.co.kr/2016/10/19/algo-10164.html</guid><dc:creator><![CDATA[Seung Hyun, Kim]]></dc:creator><pubDate>Wed, 19 Oct 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[전봇대 문제]]></title><description><![CDATA[<div class="paragraph">
<p><a href="https://www.acmicpc.net/problem/8986">문제 바로가기</a></p>
</div>
<div class="paragraph">
<p><strong>풀이</strong></p>
</div>
<div class="paragraph">
<p>식으로 나타내자면 sum ( | X(i) - d * i | ) 값이 최소인 값인데</p>
</div>
<div class="paragraph">
<p>이것을 그래프로 그리면 아래쪽으로 볼록한 그래프가 나온다</p>
</div>
<div class="paragraph">
<p>아래쪽으로 볼록한 그래프는 이진탐색, 3진탐색으로 극소값을 찾을수 있다.</p>
</div>
<div class="paragraph">
<p>NlogN으로 풀리는 문제.</p>
</div>
<div class="paragraph">
<p>처음에는 도저히 모르겠는데</p>
</div>
<div class="paragraph">
<p>이런 비슷한 문제를 보면 우선적으로 그래프먼저 그려보는게 나을듯..</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">#include &lt;iostream&gt;
#include &lt;algorithm&gt;
using namespace std;

typedef long long int ll;

ll p[100000];
ll N;
ll sum(ll&amp; l, ll&amp; r){
	ll m = (l+r)/2;
	ll lx = 0, rx = 0;
	for(int i=0;i&lt;N;i++){
		lx += abs(p[i] - m*i);
		rx += abs(p[i] - (m+1)*i);
	}
	if(lx &lt; rx){
		r=m-1;
		return lx;
	} else {
		l=m+2;
		return rx;
	}
}
int main() {
	// your code goes here
	ll l,r;
	ll m = 0x7fffffffffffffff;

	cin &gt;&gt; N;
	for(int i=0;i&lt;N;i++){
		cin &gt;&gt; p[i];
	}
	l = 0;
	r = p[N-1];
	while(l&lt;= r){
		ll s = sum(l,r);
		m = min(m,s);
	}
	cout &lt;&lt; m &lt;&lt; endl;
	return 0;
}</code></pre>
</div>
</div>]]></description><link>http://blog.code404.co.kr/2016/10/17/algo-8986.html</link><guid isPermaLink="true">http://blog.code404.co.kr/2016/10/17/algo-8986.html</guid><pubDate>Mon, 17 Oct 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[산책 문제]]></title><description><![CDATA[<div class="paragraph">
<p><a href="https://www.acmicpc.net/problem/5573">문제바로가기</a></p>
</div>
<div class="paragraph">
<p><strong>풀이</strong></p>
</div>
<div class="paragraph">
<p>동적계획법으로 푼다.</p>
</div>
<div class="paragraph">
<p>점 (i,j) 를 지나는 횟수를 P(i,j) 이고 초기값이 M(i,j)일떄</p>
</div>
<div class="paragraph">
<p>P(0,0) = N-1이다.</p>
</div>
<div class="paragraph">
<p>또한 P(i,j) = P(i+1,j) + P(i,j+1)이다. ( 아래로 가는경우, 오른쪽으로 가는경우 )</p>
</div>
<div class="paragraph">
<p>단순히 이분법으로 생각하면, P(i,j) 가 K라고 하면 이고 K가 2의 배수라면</p>
</div>
<div class="paragraph">
<p>P(i+1,j), P(i,j+1) 은 K/2 을 가지게 된다.</p>
</div>
<div class="paragraph">
<p>하지만 K가 2의 배수가 아니라면</p>
</div>
<div class="paragraph">
<p>M(i,j)값에 따라 +1되게 된다.</p>
</div>
<div class="paragraph">
<p>이를 활용해서 W * H 배열의 P(i,j)를 각각 구할수 있고</p>
</div>
<div class="paragraph">
<p>(P(i,j) + M(i,j)) % 2 에 따라서 방향을 선정하면 된다</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">#include &lt;iostream&gt;
using namespace std;
int H, W ,N;
int m[1001][1001];
int p[1001][1001];

int main() {
	// your code goes here
	cin &gt;&gt; H &gt;&gt; W &gt;&gt; N;

	int flip_cnt = 0 ;
	p[0][0] = N-1;
	for(int i=0;i&lt;H;i++){
		for(int j=0;j&lt;W;j++){
			cin &gt;&gt; m[i][j];
			if(m[i][j] == 1){
				//오
				p[i][j+1] += (p[i][j]+1)/2;
				p[i+1][j] += (p[i][j])/2;
			}
			else {
				p[i+1][j] += (p[i][j]+1)/2;
				p[i][j+1] += (p[i][j])/2;
			}
			m[H][j] = -1;
		}
		m[i][W] = -1;
	}
	int cx = 0,cy = 0;
	while(m[cy][cx] &gt;= 0){
		int c = (m[cy][cx] + p[cy][cx]) %2;
		if(c == 1){
			cx++;
		} else {
			cy++;
		}
	}
	cout &lt;&lt; cy+1 &lt;&lt; " " &lt;&lt; cx+1 &lt;&lt; endl;
	return 0;
}</code></pre>
</div>
</div>]]></description><link>http://blog.code404.co.kr/2016/10/17/algo-5573.html</link><guid isPermaLink="true">http://blog.code404.co.kr/2016/10/17/algo-5573.html</guid><pubDate>Mon, 17 Oct 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Full Tank 문제]]></title><description><![CDATA[<div class="paragraph">
<p><a href="https://www.acmicpc.net/problem/5057">문제로 바로가기</a></p>
</div>
<div class="paragraph">
<p>문제 번역</p>
</div>
<div class="paragraph">
<p><strong>문제</strong></p>
</div>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>올해 여름에 자동차 여행으로 유럽을 방문한 영수증에서, 너는 가스가격이 방문하는 도시마다 서로 다양하다는것을 알게되었다.
아마도 너가 어디서 연료를 채워야 할지를 좀 더 현명하게 정한다면, 돈을 좀 절약할수 있지 않을까?</p>
</div>
<div class="paragraph">
<p>다른 여행자들을 돕기위해(또 다음에 여행할때를 위해) , 너는 연료가 가장 싼 경로를 찾아주는 프로그램을 만드려고 한다.
모든 차들이 연료가 모두 빈 상태에서 출발하고, 같은 거리에서는 똑같은 연료가 소비된다고 가정한다.</p>
</div>
</div>
</div>
<div class="paragraph">
<p><strong>입력</strong></p>
</div>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>첫째줄에는 도시의 수(n)과 도로의 수(m) (1 &#8656; n &#8656; 1000 , 0 &#8656; m &#8656; 10000)이 입력된다. 다음 n줄은 각각 도시마다 연료의 가격 Pi ( 1&#8656; Pi &#8656; 100)가 입력된다.
그다음 m줄에는 줄마다 도시1(u), 도시2(v) , 도시1과 도시2사이의 거리(d)가 주어진다. (0 &#8656; u,v &lt; n , 1&#8656; d &#8656; 100)</p>
</div>
<div class="paragraph">
<p>그 다음줄에는 방문하고자 하는 여행자들의 수 (q)가 주어지고 (1&#8656; q &#8656; 100)
그 다음 q줄에는 각 줄마다 연료의 용량(c) 와 시작 도시 (s) 와 도착 도시(e)가 주어진다
( 1&#8656; c&#8656; 100, 0 &#8656; s,e &lt; n )</p>
</div>
</div>
</div>
<div class="paragraph">
<p><strong>출력</strong></p>
</div>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>각 여행자들마다 s에서 e로 갈때 연료 비용을 최소로 하는 경로의 총 연료비용을 출력한다.
만약 s에서 e로 갈 경로가 없을 경우 "impossible" 라고 출력한다.</p>
</div>
</div>
</div>
<div class="paragraph">
<p>다익스트라 알고리즘으로 해결할수 있다.</p>
</div>
<div class="paragraph">
<p>참조 <a href="https://namu.wiki/w/%EB%8B%A4%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%9D%BC%20%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98" class="bare">https://namu.wiki/w/%EB%8B%A4%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%9D%BC%20%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98</a></p>
</div>
<div class="paragraph">
<p>물론 기본적인 다익스트라 알고리즘으론 안된다.</p>
</div>
<div class="paragraph">
<p>기본적인 다익스트라 알고리즘의 최소 비용배열이 1차원 배열이면</p>
</div>
<div class="paragraph">
<p>이 문제는 2차원 배열을 이용해야 한다.</p>
</div>
<div class="paragraph">
<p>다시말해, 다익스트라 알고리즘의 최소 비용배열을 d라고 하면</p>
</div>
<div class="paragraph">
<p>d[n]은 n 정점으로 가는 최소비용인데,</p>
</div>
<div class="paragraph">
<p>이 문제에서는 d[n][g] 라고 하면 n정점에서 g만큼의 연료가 채워져있을때의 최소비용이</p>
</div>
<div class="paragraph">
<p>라고 가정하고 문제를 풀어야한다.</p>
</div>
<div class="paragraph">
<p>문제답)</p>
</div>
<div class="paragraph">
<p><a href="http://ideone.com/UqSuEH#comments" class="bare">http://ideone.com/UqSuEH#comments</a></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">#include &lt;iostream&gt;
#include&lt;vector&gt;
#include &lt;cstdio&gt;
#include &lt;queue&gt;
#define INFINITY 10000000
using namespace std;
typedef struct edge {
	int s, g, w;
	edge(int _s,int _g,int _w) : s(_s), g(_g),w(_w) {};
	bool operator&lt;(const edge&amp; t) const {
		return w &gt; t.w;
	}
}edge;
int d[1000][101];
int p[1000];
int n,m;

vector&lt;edge&gt; r[1000];

int find(int s,int e, int c){
	for(int i=0;i&lt;n;i++){
		for(int j=0;j&lt;=c;j++){
			d[i][j] = INFINITY;
		}
	}

	priority_queue&lt;edge&gt; q;
	q.push(edge(s, 0 , 0));
	d[s][0] = 0;

	while(!q.empty()){
		edge v = q.top();
		q.pop();
		if(v.s == e){
			return v.w;
		}

		if(v.g &lt; c &amp;&amp; v.w + p[v.s] &lt; d[v.s][v.g+1]) {
			d[v.s][v.g+1] = v.w + p[v.s];
			q.push(edge(v.s, v.g+1, v.w+p[v.s]));
		}

		const vector&lt;edge&gt;&amp; list = r[v.s];
		for(int i=0;i&lt;list.size();i++){
			const edge&amp; k = list[i];
			if(k.w &lt;= v.g){
				int g = v.g - k.w;
				if(v.w &lt; d[k.s][g]) {
					d[k.s][g] = v.w;
					q.push(edge(k.s, g, v.w));
				}
			}
		}
	}

	return -1;
}

int main() {
	int q;
	cin &gt;&gt; n &gt;&gt; m;
	for(int i=0;i&lt;n;i++){
		cin &gt;&gt; p[i];
	}
	for(int i=0;i&lt;m;i++){
		int s,e,d;
		cin &gt;&gt; s &gt;&gt; e &gt;&gt;d;
		r[s].push_back(edge(e, 0, d));
		r[e].push_back(edge(s, 0 , d));
	}
	cin &gt;&gt; q;
	while(q--){
		int s,e,c,d;
		cin &gt;&gt; c &gt;&gt; s &gt;&gt; e;
		d = find(s,e,c);
		if(d &lt; 0){
			cout &lt;&lt; "impossible" &lt;&lt; endl;
		}
		else {
			cout &lt;&lt; d &lt;&lt; endl;
		}
	}
	return 0;
}</code></pre>
</div>
</div>]]></description><link>http://blog.code404.co.kr/2016/10/14/full-tank.html</link><guid isPermaLink="true">http://blog.code404.co.kr/2016/10/14/full-tank.html</guid><pubDate>Fri, 14 Oct 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[grunt & browserify & babel을 이용해 es6을 써보자]]></title><description><![CDATA[<div class="paragraph">
<p>:hp-image:http://gruntjs.com/img/grunt-logo.png
:hp-alt-title: grunt-es2015</p>
</div>
<div class="paragraph">
<p>es6이 나온지 꽤나 됬다.</p>
</div>
<div class="paragraph">
<p>하지만 지원하는 거라 해봤자 node.js 나 크롬브라우저 뿐..</p>
</div>
<div class="paragraph">
<p>브라우저단에서 es6을 쓸수 있는 방법이 없을까?</p>
</div>
<div class="paragraph">
<p>해결방법은 grunt &amp; browserify를 쓰는 방법이 있다 ( gulp 나 )</p>
</div>
<div class="paragraph">
<p><strong>grunt란?</strong></p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://gruntjs.com/img/grunt-logo.png" alt="grunt logo.png">
</div>
</div>
<div class="paragraph">
<p>grunt는 Javascript Task Runner로써 gulp 와 똑같은 기능을 하는 놈인데</p>
</div>
<div class="paragraph">
<p>gulp보다 좀 더 직관적이다. ( 사실 비슷비슷하고 케바케.. )</p>
</div>
<div class="paragraph">
<p>필자는 gulp를 썼엇는데.. watch를 쓸때 windows에서 오류가 너무 많이 나서 grunt를 쓰고있다.</p>
</div>
<div class="paragraph">
<p>grunt를 이용하면 자바스크립트 자동 빌드도구를 만들수 있다.</p>
</div>
<div class="paragraph">
<p>예를들어, 자동으로 min.js를 만들어 준다던지</p>
</div>
<div class="paragraph">
<p>less &#8594; css , ts &#8594; js , coffee&#8594;js 등등 자동변환이라던지</p>
</div>
<div class="paragraph">
<p>편한 하는 기능들을 해주는 도구이다.</p>
</div>
<div class="paragraph">
<p>node 기반이며 npm을 이용하여 설치 가능하다.</p>
</div>
<div class="paragraph">
<p><strong>browserify란?</strong></p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://browserify.org/images/wizard_hat_blue.png" alt="wizard hat blue.png">
</div>
</div>
<div class="paragraph">
<p>browserify는 브라우저 단에서 node.js의 패키지 관리처럼 브라우저 단에서도 관리를 해줄수 있도록 하기위해 만든 것이다. 자매품은 webpack</p>
</div>
<div class="paragraph">
<p>말 그대로 브라우저 단에서 require을 쓸 수 있다.</p>
</div>
<div class="paragraph">
<p><a href="http://browserify.org/" class="bare">http://browserify.org/</a></p>
</div>
<div class="paragraph">
<p><strong>babel 이란?</strong></p>
</div>
<div class="paragraph">
<p>babel은 자바스크립트 다음 세대 버전을 쓸수있도록 해주는 transpiler라고 보면된다.</p>
</div>
<div class="paragraph">
<p>이를 이용하여 react jsx 나 es6 을 사용 할수가 있다.</p>
</div>
<div class="paragraph">
<p><a href="https://babeljs.io/" class="bare">https://babeljs.io/</a></p>
</div>
<div class="paragraph">
<p><strong>설치 및 설정</strong></p>
</div>
<div class="paragraph">
<p>npm이 설치되어 있지 않으면 <a href="https://nodejs.org/" class="bare">https://nodejs.org/</a> 에서 node를 설치하자.</p>
</div>
<div class="paragraph">
<p>우선 grunt-cli를 npm을 통하여 설치한다.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>npm install -g grunt-cli</pre>
</div>
</div>
<div class="paragraph">
<p>grunt를 동작시킬 폴더로 이동한뒤, npm을 통하여 grunt를 설치한다</p>
</div>
<div class="paragraph">
<p>npm init을 이용하여 package.json도 만들어 주면 좋다.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>cd ~/grunt-test
npm install grunt --save-dev</pre>
</div>
</div>
<div class="paragraph">
<p>grunt-browserify, babel-preset-es2015 도 npm을 통해 설치한다</p>
</div>
<div class="listingblock">
<div class="content">
<pre>npm install grunt-browserify babel-preset-es2015 --save-dev</pre>
</div>
</div>
<div class="paragraph">
<p>해당폴더에 .babelrc라는 파일을 만들어 다음과 같이 작성한다</p>
</div>
<div class="paragraph">
<p>이 파일은 babelify를 해줄때 설정하는 옵션파일이다.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" data-lang="javascript">{
    "presets" : ["es2015"]
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>이제 grunt 설정하면 되는데,</p>
</div>
<div class="paragraph">
<p>grunt는 실행시 gruntfile.js라는 파일을 실행한다</p>
</div>
<div class="paragraph">
<p>gruntfile.js는 다음과 같이 설정한다</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" data-lang="javascript">	module.exports = function (grunt){
		grunt.initConfig({
        	pkg : grunt.file.readJSON('package.json'),
            browserify : {
            	js : {
                	files : {
                    	// 출력파일 : 소스파일
                    	"./release/js/app.js" : ["./js/index.js"]
                	}
            	}
           	}
       });
       grunt.loadNpmTasks('grunt-browserify');

       grunt.registerTask('default',['browserify']);
	}</code></pre>
</div>
</div>
<div class="paragraph">
<p>필자는 js폴더의 index.js을 기준으로 잡았다.</p>
</div>
<div class="paragraph">
<p>이렇게 이용하면 jQuery ,angular등등의 라이브러리도 npm을 통하여 다운받고 바로 추가가 가능하다.</p>
</div>
<div class="paragraph">
<p>index.js</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" data-lang="javascript">	var $ = require('jQuery');
	if(window){
		// require 을 통하여 jQuery를 부르면 jQuery가 전역으로 설정이 안되서 직접 설정해준다.
		window.jQuery = $;
        window.$ = $;
	}</code></pre>
</div>
</div>
<div class="paragraph">
<p>grunt를 통하여 다른 작업도 가능하다</p>
</div>
<div class="paragraph">
<p>js uglify ( minify ) : <a href="https://github.com/gruntjs/grunt-contrib-uglify" class="bare">https://github.com/gruntjs/grunt-contrib-uglify</a></p>
</div>
<div class="paragraph">
<p>css min ( minify) : <a href="https://github.com/gruntjs/grunt-contrib-cssmin" class="bare">https://github.com/gruntjs/grunt-contrib-cssmin</a></p>
</div>
<div class="paragraph">
<p>concat : <a href="https://github.com/gruntjs/grunt-contrib-concat" class="bare">https://github.com/gruntjs/grunt-contrib-concat</a></p>
</div>
<div class="paragraph">
<p>watch : <a href="https://github.com/gruntjs/grunt-contrib-watch" class="bare">https://github.com/gruntjs/grunt-contrib-watch</a></p>
</div>]]></description><link>http://blog.code404.co.kr/2016/10/12/grunt-browserify-babel-es6.html</link><guid isPermaLink="true">http://blog.code404.co.kr/2016/10/12/grunt-browserify-babel-es6.html</guid><pubDate>Wed, 12 Oct 2016 00:00:00 GMT</pubDate></item></channel></rss>